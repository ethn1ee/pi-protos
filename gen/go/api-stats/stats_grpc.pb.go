// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api-stats/stats.proto

package api_stats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stats_StreamCpu_FullMethodName         = "/stats.Stats/StreamCpu"
	Stats_StreamDisk_FullMethodName        = "/stats.Stats/StreamDisk"
	Stats_StreamHost_FullMethodName        = "/stats.Stats/StreamHost"
	Stats_StreamMemory_FullMethodName      = "/stats.Stats/StreamMemory"
	Stats_StreamTemperature_FullMethodName = "/stats.Stats/StreamTemperature"
)

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	StreamCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CpuResponse], error)
	StreamDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiskResponse], error)
	StreamHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HostResponse], error)
	StreamMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemoryResponse], error)
	StreamTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemperatureResponse], error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) StreamCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CpuResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[0], Stats_StreamCpu_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, CpuResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamCpuClient = grpc.ServerStreamingClient[CpuResponse]

func (c *statsClient) StreamDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[1], Stats_StreamDisk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, DiskResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamDiskClient = grpc.ServerStreamingClient[DiskResponse]

func (c *statsClient) StreamHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HostResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[2], Stats_StreamHost_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, HostResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamHostClient = grpc.ServerStreamingClient[HostResponse]

func (c *statsClient) StreamMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[3], Stats_StreamMemory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, MemoryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamMemoryClient = grpc.ServerStreamingClient[MemoryResponse]

func (c *statsClient) StreamTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TemperatureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[4], Stats_StreamTemperature_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, TemperatureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamTemperatureClient = grpc.ServerStreamingClient[TemperatureResponse]

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility.
type StatsServer interface {
	StreamCpu(*Empty, grpc.ServerStreamingServer[CpuResponse]) error
	StreamDisk(*Empty, grpc.ServerStreamingServer[DiskResponse]) error
	StreamHost(*Empty, grpc.ServerStreamingServer[HostResponse]) error
	StreamMemory(*Empty, grpc.ServerStreamingServer[MemoryResponse]) error
	StreamTemperature(*Empty, grpc.ServerStreamingServer[TemperatureResponse]) error
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsServer struct{}

func (UnimplementedStatsServer) StreamCpu(*Empty, grpc.ServerStreamingServer[CpuResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCpu not implemented")
}
func (UnimplementedStatsServer) StreamDisk(*Empty, grpc.ServerStreamingServer[DiskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDisk not implemented")
}
func (UnimplementedStatsServer) StreamHost(*Empty, grpc.ServerStreamingServer[HostResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHost not implemented")
}
func (UnimplementedStatsServer) StreamMemory(*Empty, grpc.ServerStreamingServer[MemoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMemory not implemented")
}
func (UnimplementedStatsServer) StreamTemperature(*Empty, grpc.ServerStreamingServer[TemperatureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}
func (UnimplementedStatsServer) testEmbeddedByValue()               {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	// If the following call pancis, it indicates UnimplementedStatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_StreamCpu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamCpu(m, &grpc.GenericServerStream[Empty, CpuResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamCpuServer = grpc.ServerStreamingServer[CpuResponse]

func _Stats_StreamDisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamDisk(m, &grpc.GenericServerStream[Empty, DiskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamDiskServer = grpc.ServerStreamingServer[DiskResponse]

func _Stats_StreamHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamHost(m, &grpc.GenericServerStream[Empty, HostResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamHostServer = grpc.ServerStreamingServer[HostResponse]

func _Stats_StreamMemory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamMemory(m, &grpc.GenericServerStream[Empty, MemoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamMemoryServer = grpc.ServerStreamingServer[MemoryResponse]

func _Stats_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamTemperature(m, &grpc.GenericServerStream[Empty, TemperatureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stats_StreamTemperatureServer = grpc.ServerStreamingServer[TemperatureResponse]

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCpu",
			Handler:       _Stats_StreamCpu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDisk",
			Handler:       _Stats_StreamDisk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamHost",
			Handler:       _Stats_StreamHost_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMemory",
			Handler:       _Stats_StreamMemory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTemperature",
			Handler:       _Stats_StreamTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api-stats/stats.proto",
}
