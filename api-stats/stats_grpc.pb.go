// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/stats.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	StreamCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamCpuClient, error)
	StreamDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamDiskClient, error)
	StreamHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamHostClient, error)
	StreamMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamMemoryClient, error)
	StreamTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamTemperatureClient, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) StreamCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamCpuClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[0], "/stats.Stats/StreamCpu", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamCpuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamCpuClient interface {
	Recv() (*CpuResponse, error)
	grpc.ClientStream
}

type statsStreamCpuClient struct {
	grpc.ClientStream
}

func (x *statsStreamCpuClient) Recv() (*CpuResponse, error) {
	m := new(CpuResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsClient) StreamDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamDiskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[1], "/stats.Stats/StreamDisk", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamDiskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamDiskClient interface {
	Recv() (*DiskResponse, error)
	grpc.ClientStream
}

type statsStreamDiskClient struct {
	grpc.ClientStream
}

func (x *statsStreamDiskClient) Recv() (*DiskResponse, error) {
	m := new(DiskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsClient) StreamHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamHostClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[2], "/stats.Stats/StreamHost", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamHostClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamHostClient interface {
	Recv() (*HostResponse, error)
	grpc.ClientStream
}

type statsStreamHostClient struct {
	grpc.ClientStream
}

func (x *statsStreamHostClient) Recv() (*HostResponse, error) {
	m := new(HostResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsClient) StreamMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamMemoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[3], "/stats.Stats/StreamMemory", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamMemoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamMemoryClient interface {
	Recv() (*MemoryResponse, error)
	grpc.ClientStream
}

type statsStreamMemoryClient struct {
	grpc.ClientStream
}

func (x *statsStreamMemoryClient) Recv() (*MemoryResponse, error) {
	m := new(MemoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsClient) StreamTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[4], "/stats.Stats/StreamTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamTemperatureClient interface {
	Recv() (*TemperatureResponse, error)
	grpc.ClientStream
}

type statsStreamTemperatureClient struct {
	grpc.ClientStream
}

func (x *statsStreamTemperatureClient) Recv() (*TemperatureResponse, error) {
	m := new(TemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility
type StatsServer interface {
	StreamCpu(*Empty, Stats_StreamCpuServer) error
	StreamDisk(*Empty, Stats_StreamDiskServer) error
	StreamHost(*Empty, Stats_StreamHostServer) error
	StreamMemory(*Empty, Stats_StreamMemoryServer) error
	StreamTemperature(*Empty, Stats_StreamTemperatureServer) error
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (UnimplementedStatsServer) StreamCpu(*Empty, Stats_StreamCpuServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCpu not implemented")
}
func (UnimplementedStatsServer) StreamDisk(*Empty, Stats_StreamDiskServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDisk not implemented")
}
func (UnimplementedStatsServer) StreamHost(*Empty, Stats_StreamHostServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHost not implemented")
}
func (UnimplementedStatsServer) StreamMemory(*Empty, Stats_StreamMemoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMemory not implemented")
}
func (UnimplementedStatsServer) StreamTemperature(*Empty, Stats_StreamTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTemperature not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_StreamCpu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamCpu(m, &statsStreamCpuServer{stream})
}

type Stats_StreamCpuServer interface {
	Send(*CpuResponse) error
	grpc.ServerStream
}

type statsStreamCpuServer struct {
	grpc.ServerStream
}

func (x *statsStreamCpuServer) Send(m *CpuResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Stats_StreamDisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamDisk(m, &statsStreamDiskServer{stream})
}

type Stats_StreamDiskServer interface {
	Send(*DiskResponse) error
	grpc.ServerStream
}

type statsStreamDiskServer struct {
	grpc.ServerStream
}

func (x *statsStreamDiskServer) Send(m *DiskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Stats_StreamHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamHost(m, &statsStreamHostServer{stream})
}

type Stats_StreamHostServer interface {
	Send(*HostResponse) error
	grpc.ServerStream
}

type statsStreamHostServer struct {
	grpc.ServerStream
}

func (x *statsStreamHostServer) Send(m *HostResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Stats_StreamMemory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamMemory(m, &statsStreamMemoryServer{stream})
}

type Stats_StreamMemoryServer interface {
	Send(*MemoryResponse) error
	grpc.ServerStream
}

type statsStreamMemoryServer struct {
	grpc.ServerStream
}

func (x *statsStreamMemoryServer) Send(m *MemoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Stats_StreamTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamTemperature(m, &statsStreamTemperatureServer{stream})
}

type Stats_StreamTemperatureServer interface {
	Send(*TemperatureResponse) error
	grpc.ServerStream
}

type statsStreamTemperatureServer struct {
	grpc.ServerStream
}

func (x *statsStreamTemperatureServer) Send(m *TemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCpu",
			Handler:       _Stats_StreamCpu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDisk",
			Handler:       _Stats_StreamDisk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamHost",
			Handler:       _Stats_StreamHost_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMemory",
			Handler:       _Stats_StreamMemory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTemperature",
			Handler:       _Stats_StreamTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stats.proto",
}
